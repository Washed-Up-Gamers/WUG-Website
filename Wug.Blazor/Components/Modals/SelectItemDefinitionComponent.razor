@using Shared.Lua.LuaObjects
@using Shared.Lua.Scripting

@if (Loaded)
{
    <div>
        <div class="item-list">
            @foreach (var itemdef in ItemDefinitions) {
                <div class='list-item @(itemdef.Id == (CurrentlySelected?.Id ?? 0) ? "selected" : "")' @onclick="async () => { await Select(itemdef); }">
                    <h5 style="display: inline-block; padding:5px;padding-bottom:0px;">@itemdef.Name</h5>
                    <div class="modifiers">
                        @HtmlForModifiers[itemdef.Id]
                    </div>
                </div>
            }
        </div>
        <button class="btn btn-outline-primary" @onclick="ClickedSave" style="margin-top: 12px;">
            Save
        </button>
    </div>
}
@code {
    public bool Loaded = false;
    public List<ItemDefinition> ItemDefinitions { get; set; }

    [Parameter]
    public ItemDefinition CurrentlySelected { get; set; }

    [Parameter]
    public string BaseItemNameNeeded { get; set; }

    [Parameter]
    public bool WeaponOrAmmo { get; set; }

    public Dictionary<long, MarkupString> HtmlForModifiers = new();

    protected override async Task OnInitializedAsync()
    {
        ItemDefinitions = (await SVClient.GetJsonAsync<List<ItemDefinition>>($"api/itemdefinitions/all")).Data;
        ItemDefinitions = ItemDefinitions
            .Where(x => x.BaseItemName == BaseItemNameNeeded || (x.OwnerId == 100 && x.Name.ToLower().Replace(" ", "_").Contains(BaseItemNameNeeded) && x.Name != "Rifle"))
            .ToList();
        foreach (var itemdef in ItemDefinitions)
        {
            string currenthtml = "";
            foreach (var pair in itemdef.Modifiers) {
                var syntaxnode = new SyntaxModifierNode()
                {
                    itemModifierType = pair.Key,
                    Value = new Shared.Lua.Scripting.Decimal() {
                        Value = (decimal)pair.Value
                    }
                };
                currenthtml += syntaxnode.GenerateHTMLForListing(new ExecutionState(null, null));
            }
            HtmlForModifiers[itemdef.Id] = (MarkupString)currenthtml;
        }
        Loaded = true;
    }

    public async Task ClickedSave()
    {
        ClientData.DivisionDesignerModal.DisplaySelectItemComponentForWeapon = false;
        ClientData.DivisionDesignerModal.DisplaySelectItemComponentForAmmo = false;
        await ClientData.DivisionDesignerModal.Refresh();
    }

    public async Task Select(ItemDefinition itemdef)
    {
        if (WeaponOrAmmo) {
            ClientData.DivisionDesignerModal.WeaponDefinition = itemdef;
            ClientData.DivisionDesignerModal.CurrentlyEdittingRegimentTemplate.WeaponItemDefinitionId = itemdef.Id;
        }
        else {
            ClientData.DivisionDesignerModal.AmmoDefinition = itemdef;
            ClientData.DivisionDesignerModal.CurrentlyEdittingRegimentTemplate.AmmoItemDefinitionId = itemdef.Id;
        }

        await ClientData.DivisionDesignerModal.Refresh();
    }
}
